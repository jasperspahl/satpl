// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlist.sql

package database

import (
	"context"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (
  user_id,
  spotify_id,
  name
) VALUES ( $1, $2, $3 )
RETURNING id, user_id, spotify_id, name
`

type CreatePlaylistParams struct {
	UserID    int32
	SpotifyID string
	Name      string
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRow(ctx, createPlaylist, arg.UserID, arg.SpotifyID, arg.Name)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SpotifyID,
		&i.Name,
	)
	return i, err
}

const getPlaylistsByUserID = `-- name: GetPlaylistsByUserID :many
SELECT id, user_id, spotify_id, name FROM playlists
WHERE user_id = $1
`

func (q *Queries) GetPlaylistsByUserID(ctx context.Context, userID int32) ([]Playlist, error) {
	rows, err := q.db.Query(ctx, getPlaylistsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SpotifyID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
