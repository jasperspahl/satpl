// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  spotify_id,
  display_name,
  email,
  access_token,
  refresh_token
) VALUES ( $1, $2, $3, $4, $5 )
RETURNING id, display_name, email, spotify_id, access_token, refresh_token
`

type CreateUserParams struct {
	SpotifyID    string
	DisplayName  pgtype.Text
	Email        pgtype.Text
	AccessToken  string
	RefreshToken string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.SpotifyID,
		arg.DisplayName,
		arg.Email,
		arg.AccessToken,
		arg.RefreshToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.SpotifyID,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, display_name, email, spotify_id, access_token, refresh_token FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.SpotifyID,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const getUserBySpotifyID = `-- name: GetUserBySpotifyID :one
SELECT id, display_name, email, spotify_id, access_token, refresh_token FROM users
WHERE spotify_id = $1
`

func (q *Queries) GetUserBySpotifyID(ctx context.Context, spotifyID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySpotifyID, spotifyID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.SpotifyID,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const updateAccessToken = `-- name: UpdateAccessToken :exec
UPDATE users SET access_token = $2
WHERE id = $1
`

type UpdateAccessTokenParams struct {
	ID          int32
	AccessToken string
}

func (q *Queries) UpdateAccessToken(ctx context.Context, arg UpdateAccessTokenParams) error {
	_, err := q.db.Exec(ctx, updateAccessToken, arg.ID, arg.AccessToken)
	return err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE users SET refresh_token = $2
WHERE id = $1
`

type UpdateRefreshTokenParams struct {
	ID           int32
	RefreshToken string
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateRefreshToken, arg.ID, arg.RefreshToken)
	return err
}

const updateTokens = `-- name: UpdateTokens :exec
UPDATE users SET access_token = $2, refresh_token = $3
WHERE id = $1
`

type UpdateTokensParams struct {
	ID           int32
	AccessToken  string
	RefreshToken string
}

func (q *Queries) UpdateTokens(ctx context.Context, arg UpdateTokensParams) error {
	_, err := q.db.Exec(ctx, updateTokens, arg.ID, arg.AccessToken, arg.RefreshToken)
	return err
}
